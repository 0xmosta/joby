import { usePrivy, useWallets } from "@privy-io/react-auth";
import { EAS, Offchain, SchemaEncoder, SchemaRegistry } from '@ethereum-attestation-service/eas-sdk';
import { ethers } from 'ethers';
import { useEffect, useState } from 'react';
import { TransitiveTrustGraph } from "@ethereum-attestation-service/transitive-trust-sdk";
import axios from 'axios';

interface Edge {
  id: string;
  src: string;
  dst: string;
  score: number;
}

export default function Eas() {
  const { user } = usePrivy();
  const { wallets } = useWallets();
  const [ethersProvider, setEthersProvider] = useState<ethers.providers.Web3Provider | null>(null);
  const [ethersSigner, setEthersSigner] = useState<ethers.Signer | null>(null);
  const [edges, setEdges] = useState<Edge[]>([]);
  const [trustScores, setTrustScores] = useState<{ [key: string]: number }>({});

  useEffect(() => {
    const init = async () => {
      if (wallets.length > 0) {
        const _provider = await wallets[0].getEthersProvider();
        setEthersProvider(_provider);
        const _signer = _provider.getSigner();
        setEthersSigner(_signer);
      }
    };
    init();
  }, [wallets]);

  useEffect(() => {
    const fetchEdges = async () => {
      try {
        const response = await axios.get('http://localhost:8000/edges/');
        setEdges(response.data);
        console.log('Edges:', response.data);
      } catch (error) {
        console.error('Error fetching edges:', error);
      }
    };

    fetchEdges();
  }, []);

  useEffect(() => {
    if (edges.length > 0) {
      const graph = new TransitiveTrustGraph();
      
      // Add edges to the graph
      edges.forEach(edge => {
        graph.addEdge(edge.src, edge.dst, edge.score, 0.1); // Using a default uncertainty of 0.1
      });

      // Get unique nodes
      const nodes = Array.from(new Set(edges.flatMap(edge => [edge.src, edge.dst])));

      // Compute trust scores for all nodes from all nodes
      const scores: { [key: string]: number } = {};
      nodes.forEach(sourceNode => {
        const nodeScores = graph.computeTrustScores(sourceNode, nodes);
        scores[sourceNode] = nodeScores;
      });

      setTrustScores(scores);
    }
  }, [edges]);

  if (!ethersProvider || !ethersSigner) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1>Trust Graph</h1>
      <h2>Edges:</h2>
      <ul>
        {edges.map(edge => (
          <li key={edge.id}>{edge.src} -> {edge.dst}: {edge.score}</li>
        ))}
      </ul>
      <h2>Trust Scores:</h2>
      <ul>
        {Object.entries(trustScores).map(([source, scores]) => (
          <li key={source}>
            From {source}:
            <ul>
              {Object.entries(scores).map(([target, score]) => (
                <li key={`${source}-${target}`}>{target}: {score.toFixed(4)}</li>
              ))}
            </ul>
          </li>
        ))}
      </ul>
    </div>
  );
}
